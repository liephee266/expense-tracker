// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expense-tracker/ent/budget"
	"expense-tracker/ent/category"
	"expense-tracker/ent/predicate"
	"expense-tracker/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BudgetUpdate is the builder for updating Budget entities.
type BudgetUpdate struct {
	config
	hooks    []Hook
	mutation *BudgetMutation
}

// Where appends a list predicates to the BudgetUpdate builder.
func (_u *BudgetUpdate) Where(ps ...predicate.Budget) *BudgetUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAmount sets the "amount" field.
func (_u *BudgetUpdate) SetAmount(v float64) *BudgetUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *BudgetUpdate) SetNillableAmount(v *float64) *BudgetUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *BudgetUpdate) AddAmount(v float64) *BudgetUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *BudgetUpdate) SetStartDate(v time.Time) *BudgetUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *BudgetUpdate) SetNillableStartDate(v *time.Time) *BudgetUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *BudgetUpdate) SetEndDate(v time.Time) *BudgetUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *BudgetUpdate) SetNillableEndDate(v *time.Time) *BudgetUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *BudgetUpdate) ClearEndDate() *BudgetUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (_u *BudgetUpdate) SetCategoryID(id int) *BudgetUpdate {
	_u.mutation.SetCategoryID(id)
	return _u
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (_u *BudgetUpdate) SetNillableCategoryID(id *int) *BudgetUpdate {
	if id != nil {
		_u = _u.SetCategoryID(*id)
	}
	return _u
}

// SetCategory sets the "category" edge to the Category entity.
func (_u *BudgetUpdate) SetCategory(v *Category) *BudgetUpdate {
	return _u.SetCategoryID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *BudgetUpdate) SetUserID(id int) *BudgetUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *BudgetUpdate) SetNillableUserID(id *int) *BudgetUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *BudgetUpdate) SetUser(v *User) *BudgetUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the BudgetMutation object of the builder.
func (_u *BudgetUpdate) Mutation() *BudgetMutation {
	return _u.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (_u *BudgetUpdate) ClearCategory() *BudgetUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *BudgetUpdate) ClearUser() *BudgetUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BudgetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BudgetUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BudgetUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BudgetUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *BudgetUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(budget.Table, budget.Columns, sqlgraph.NewFieldSpec(budget.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(budget.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(budget.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(budget.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(budget.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(budget.FieldEndDate, field.TypeTime)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.CategoryTable,
			Columns: []string{budget.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.CategoryTable,
			Columns: []string{budget.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{budget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BudgetUpdateOne is the builder for updating a single Budget entity.
type BudgetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BudgetMutation
}

// SetAmount sets the "amount" field.
func (_u *BudgetUpdateOne) SetAmount(v float64) *BudgetUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *BudgetUpdateOne) SetNillableAmount(v *float64) *BudgetUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *BudgetUpdateOne) AddAmount(v float64) *BudgetUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *BudgetUpdateOne) SetStartDate(v time.Time) *BudgetUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *BudgetUpdateOne) SetNillableStartDate(v *time.Time) *BudgetUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *BudgetUpdateOne) SetEndDate(v time.Time) *BudgetUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *BudgetUpdateOne) SetNillableEndDate(v *time.Time) *BudgetUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *BudgetUpdateOne) ClearEndDate() *BudgetUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (_u *BudgetUpdateOne) SetCategoryID(id int) *BudgetUpdateOne {
	_u.mutation.SetCategoryID(id)
	return _u
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (_u *BudgetUpdateOne) SetNillableCategoryID(id *int) *BudgetUpdateOne {
	if id != nil {
		_u = _u.SetCategoryID(*id)
	}
	return _u
}

// SetCategory sets the "category" edge to the Category entity.
func (_u *BudgetUpdateOne) SetCategory(v *Category) *BudgetUpdateOne {
	return _u.SetCategoryID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *BudgetUpdateOne) SetUserID(id int) *BudgetUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *BudgetUpdateOne) SetNillableUserID(id *int) *BudgetUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *BudgetUpdateOne) SetUser(v *User) *BudgetUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the BudgetMutation object of the builder.
func (_u *BudgetUpdateOne) Mutation() *BudgetMutation {
	return _u.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (_u *BudgetUpdateOne) ClearCategory() *BudgetUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *BudgetUpdateOne) ClearUser() *BudgetUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the BudgetUpdate builder.
func (_u *BudgetUpdateOne) Where(ps ...predicate.Budget) *BudgetUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BudgetUpdateOne) Select(field string, fields ...string) *BudgetUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Budget entity.
func (_u *BudgetUpdateOne) Save(ctx context.Context) (*Budget, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BudgetUpdateOne) SaveX(ctx context.Context) *Budget {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BudgetUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BudgetUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *BudgetUpdateOne) sqlSave(ctx context.Context) (_node *Budget, err error) {
	_spec := sqlgraph.NewUpdateSpec(budget.Table, budget.Columns, sqlgraph.NewFieldSpec(budget.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Budget.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, budget.FieldID)
		for _, f := range fields {
			if !budget.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != budget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(budget.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(budget.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(budget.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(budget.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(budget.FieldEndDate, field.TypeTime)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.CategoryTable,
			Columns: []string{budget.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.CategoryTable,
			Columns: []string{budget.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Budget{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{budget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
