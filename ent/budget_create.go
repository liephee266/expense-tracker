// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expense-tracker/ent/budget"
	"expense-tracker/ent/category"
	"expense-tracker/ent/user"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BudgetCreate is the builder for creating a Budget entity.
type BudgetCreate struct {
	config
	mutation *BudgetMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (_c *BudgetCreate) SetAmount(v float64) *BudgetCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *BudgetCreate) SetStartDate(v time.Time) *BudgetCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *BudgetCreate) SetEndDate(v time.Time) *BudgetCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *BudgetCreate) SetNillableEndDate(v *time.Time) *BudgetCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (_c *BudgetCreate) SetCategoryID(id int) *BudgetCreate {
	_c.mutation.SetCategoryID(id)
	return _c
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (_c *BudgetCreate) SetNillableCategoryID(id *int) *BudgetCreate {
	if id != nil {
		_c = _c.SetCategoryID(*id)
	}
	return _c
}

// SetCategory sets the "category" edge to the Category entity.
func (_c *BudgetCreate) SetCategory(v *Category) *BudgetCreate {
	return _c.SetCategoryID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *BudgetCreate) SetUserID(id int) *BudgetCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *BudgetCreate) SetNillableUserID(id *int) *BudgetCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *BudgetCreate) SetUser(v *User) *BudgetCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the BudgetMutation object of the builder.
func (_c *BudgetCreate) Mutation() *BudgetMutation {
	return _c.mutation
}

// Save creates the Budget in the database.
func (_c *BudgetCreate) Save(ctx context.Context) (*Budget, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BudgetCreate) SaveX(ctx context.Context) *Budget {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BudgetCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BudgetCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BudgetCreate) check() error {
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Budget.amount"`)}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Budget.start_date"`)}
	}
	return nil
}

func (_c *BudgetCreate) sqlSave(ctx context.Context) (*Budget, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BudgetCreate) createSpec() (*Budget, *sqlgraph.CreateSpec) {
	var (
		_node = &Budget{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(budget.Table, sqlgraph.NewFieldSpec(budget.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(budget.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(budget.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(budget.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if nodes := _c.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.CategoryTable,
			Columns: []string{budget.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.budget_category = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   budget.UserTable,
			Columns: []string{budget.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.budget_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BudgetCreateBulk is the builder for creating many Budget entities in bulk.
type BudgetCreateBulk struct {
	config
	err      error
	builders []*BudgetCreate
}

// Save creates the Budget entities in the database.
func (_c *BudgetCreateBulk) Save(ctx context.Context) ([]*Budget, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Budget, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BudgetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BudgetCreateBulk) SaveX(ctx context.Context) []*Budget {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BudgetCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BudgetCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
