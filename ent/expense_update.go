// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"expense-tracker/ent/expense"
	"expense-tracker/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExpenseUpdate is the builder for updating Expense entities.
type ExpenseUpdate struct {
	config
	hooks    []Hook
	mutation *ExpenseMutation
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (_u *ExpenseUpdate) Where(ps ...predicate.Expense) *ExpenseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ExpenseUpdate) SetTitle(v string) *ExpenseUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ExpenseUpdate) SetNillableTitle(v *string) *ExpenseUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *ExpenseUpdate) SetAmount(v float64) *ExpenseUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *ExpenseUpdate) SetNillableAmount(v *float64) *ExpenseUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *ExpenseUpdate) AddAmount(v float64) *ExpenseUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetDate sets the "date" field.
func (_u *ExpenseUpdate) SetDate(v time.Time) *ExpenseUpdate {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *ExpenseUpdate) SetNillableDate(v *time.Time) *ExpenseUpdate {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *ExpenseUpdate) SetCategory(v string) *ExpenseUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ExpenseUpdate) SetNillableCategory(v *string) *ExpenseUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ExpenseUpdate) ClearCategory() *ExpenseUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// Mutation returns the ExpenseMutation object of the builder.
func (_u *ExpenseUpdate) Mutation() *ExpenseMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExpenseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExpenseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExpenseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExpenseUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := expense.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Expense.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Amount(); ok {
		if err := expense.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Expense.amount": %w`, err)}
		}
	}
	return nil
}

func (_u *ExpenseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(expense.Table, expense.Columns, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(expense.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(expense.FieldDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(expense.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(expense.FieldCategory, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExpenseUpdateOne is the builder for updating a single Expense entity.
type ExpenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpenseMutation
}

// SetTitle sets the "title" field.
func (_u *ExpenseUpdateOne) SetTitle(v string) *ExpenseUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ExpenseUpdateOne) SetNillableTitle(v *string) *ExpenseUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *ExpenseUpdateOne) SetAmount(v float64) *ExpenseUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *ExpenseUpdateOne) SetNillableAmount(v *float64) *ExpenseUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *ExpenseUpdateOne) AddAmount(v float64) *ExpenseUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetDate sets the "date" field.
func (_u *ExpenseUpdateOne) SetDate(v time.Time) *ExpenseUpdateOne {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *ExpenseUpdateOne) SetNillableDate(v *time.Time) *ExpenseUpdateOne {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *ExpenseUpdateOne) SetCategory(v string) *ExpenseUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ExpenseUpdateOne) SetNillableCategory(v *string) *ExpenseUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *ExpenseUpdateOne) ClearCategory() *ExpenseUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// Mutation returns the ExpenseMutation object of the builder.
func (_u *ExpenseUpdateOne) Mutation() *ExpenseMutation {
	return _u.mutation
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (_u *ExpenseUpdateOne) Where(ps ...predicate.Expense) *ExpenseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExpenseUpdateOne) Select(field string, fields ...string) *ExpenseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Expense entity.
func (_u *ExpenseUpdateOne) Save(ctx context.Context) (*Expense, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExpenseUpdateOne) SaveX(ctx context.Context) *Expense {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExpenseUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := expense.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Expense.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Amount(); ok {
		if err := expense.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Expense.amount": %w`, err)}
		}
	}
	return nil
}

func (_u *ExpenseUpdateOne) sqlSave(ctx context.Context) (_node *Expense, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(expense.Table, expense.Columns, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expense.FieldID)
		for _, f := range fields {
			if !expense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(expense.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(expense.FieldDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(expense.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(expense.FieldCategory, field.TypeString)
	}
	_node = &Expense{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
